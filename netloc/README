# Copyright Â© 2013      University of Wisconsin-La Crosse.
#                         All rights reserved.
#
# See COPYING in top-level directory.
#
# $HEADER$
#

Some notes on the data format:

------------------------------------------------------------------------
** node-style database format

    High level format:
        A hash where "physical id => netloc_node" such that, for each
        key-value pair (k,v), k == v.get_physical_id().

    The database contains JSON structured as:

    { Keys   = Physical id of the netloc_node the value represents
      Values =
        { Keys   = keywords defined in netloc/src/support.h for netloc_node
          Values = JSON string (all but CONNECTIONS)
                 =
            { Keys   = Physical id of netloc_node this netloc_node has the edge to
              Values =
                [
                  Values =
                    { Keys   = keywords defined in netloc/src/support.h for netloc_edge
                      Values = JSON string
                    }
                ]
            }
        }
    }

------------------------------------------------------------------------

** paths-style database format

    High level format:
        A hash where "(physical id, physical id) => vector<netloc_edge>"
        such that, for each key-key-value triple (k1,k2,v),
        k1 == v.front().get_node_from().get_phy_id() and
        k2 == v.back().get_node_to().get_phy_id().

    The database contains JSON structured as:

        { Keys   = Physical ids of souce node
          Values =
            { Keys   = Physical ids of destination node
              Values =
                [
                  Values =
                    { Keys   = keywords defined in netloc/src/support.h for netloc_edge
                      Values = JSON string
                    }
                ]
            }
        }
------------------------------------------------------------------------
